<%--
=================================================================
emxCPNFormCreateValidation.jsp

 Copyright (c) 1992-2020 Dassault Systemes.
 All Rights Reserved.
 This program contains proprietary and trade secret information of MatrixOne,Inc.
 Copyright notice is precautionary only
 and does not evidence any actual or intended publication of such program
=================================================================
 emxCPNValidation.jsp
 This file is used to add any validation routines to be used by the CPN Central WebForm component
 Version History
 Version No     : 1.0
 Date           : 16 June 2014
 Developer      : G1G
 IR/HL          : IR-304581-3DEXPERIENCER2015x
 Change         : Changed the functions validateCT() & validateCO() to check for empty fields when Stage field is not available.
-----------------------------------------------------------------
--%>

<%@page import="com.matrixone.apps.cpn.util.CPNUIUtil"%>
<%@include file="../common/emxNavigatorNoDocTypeInclude.inc"%>
<%@page import ="com.matrixone.apps.domain.util.EnoviaResourceBundle"%>
<%
String strStageListToConnectCO 		= FrameworkProperties.getProperty(context,"emxCPN.ProductData.AllowedStageListToConnectCO");
StringList slStageListToConnectCO 	= FrameworkUtil.split(strStageListToConnectCO, ",");
String strNotApplicableStage 		= FrameworkProperties.getProperty(context,"emxCPN.ProductData.NotApplicableStageListToConnectCO");
String strSpecCategoryInterim       = EnoviaResourceBundle.getProperty(context,"emxCPN.ProdDataStatus.Interim");
String strSpecCategoryExperimental  = EnoviaResourceBundle.getProperty(context,"emxCPN.ProdDataStatus.Experimental");
String strImpactedSiteExclusionList = EnoviaResourceBundle.getProperty(context,"enoTemplate",context.getLocale(),"enoTemplate.Template.ImpactedSiteExclusionList");

//Added by TCS for TRU-6979,TRU-11103,TRU-11104 - BEGIN
String 	strSpecStageCommercial = EnoviaResourceBundle.getProperty(context,"emxCPN.ProdDataStage.Commercial");
 //Added by TCS for TRU-6979,TRU-11103,TRU-11104 - END
Iterator itr 						= null ;

String loggedInUser =  context.getUser();
String personId = PersonUtil.getPersonObjectID(context);
String typeSelected = emxGetParameter(request, "TypeActual");
String strPDmode = emxGetParameter(request, "PDmode");
String sBUId = "";

//Added For 16629-Start
String strPersonSecurityCtx=PropertyUtil.getAdminProperty(context, "person", context.getUser(), "preference_DefaultSecurityContext");
StringList sList = FrameworkUtil.split(strPersonSecurityCtx,".");
String sCTXcompanyName = "";
String sCTXcompanyId = "";

sCTXcompanyName = (String)sList.get(1);


//Added for AATL-23635---Start
String sCTXCollabSpaceName = "";
String sCTXRoleName = "";
String sRestrictedAssignment = "";
sCTXCollabSpaceName = (String)sList.get(2);
sCTXRoleName = (String)sList.get(0);
//String sMWISpecType = PropertyUtil.getSchemaProperty(context,"type_ManufacturingWorkInstruction");
//String sFDSpecType = PropertyUtil.getSchemaProperty(context,"type_FormulaDevice");
String sProductDataOrig = PropertyUtil.getSchemaProperty(context,"role_IPMOriginator");
String sBusinessAdmin = PropertyUtil.getSchemaProperty(context,"role_BusinessAdministrator");
String strRestrictedCS = "";

String strRestrictedType = EnoviaResourceBundle.getProperty(context,"emxCPN", context.getLocale(),"emxCPN.Restricted.Type");
//System.out.println("----------strRestrictedType----------- "+strRestrictedType);
String sCollabMap = "";

StringList slRestrictedType = FrameworkUtil.split(strRestrictedType,",");
for (int itype=0;itype<slRestrictedType.size();itype++) {
	String sPropKey = "emxCPN.Restricted.CollabSpace." + (((String)slRestrictedType.get(itype)).replace (" ",""));
	strRestrictedCS = EnoviaResourceBundle.getProperty(context,"emxCPN", context.getLocale(),sPropKey);
	//System.out.println("----------strRestrictedCS----------- "+strRestrictedCS);
	StringList slRestrictedCS = FrameworkUtil.split(strRestrictedCS,",");
	sCollabMap += ((String)slRestrictedType.get(itype))+":"+strRestrictedCS+"|";
	for (int iCs=0;iCs<slRestrictedCS.size();iCs++) {
		if ( sCTXCollabSpaceName.equalsIgnoreCase((String)slRestrictedCS.get(iCs))) {
			if ((sCTXRoleName.equals(sProductDataOrig)) || (sCTXRoleName.equals(sBusinessAdmin))) {
				sRestrictedAssignment += "," + (String)slRestrictedType.get(itype);
				//System.out.println("----------sRestrictedAssignment----------- "+sRestrictedAssignment);

			}
		}

	}
}

//Added for AATL-23635---End

String strMQLCommand ;
String strMQLCommandResult =  "";

MQLCommand prMQL  = new MQLCommand();
			prMQL.open(context);

strMQLCommand = "print bus '"+DomainConstants.TYPE_COMPANY+"' '"+sCTXcompanyName+"' - select id dump";
			prMQL.executeCommand(context,strMQLCommand);
			strMQLCommandResult = prMQL.getResult();

			sCTXcompanyId = strMQLCommandResult.trim();


// Added for AATL-23531 -- Starts
//print attribute 'Marketing Company(s)' select range dump |
strMQLCommand = "print attribute 'Marketing Company(s)' select range dump |";
prMQL.executeCommand(context,strMQLCommand);
strMQLCommandResult = prMQL.getResult();
String mcCompanysLoV = strMQLCommandResult.trim();
// Added for AATL-23531 -- Ends

//Added For 16629-End

//Added by Xcapa team in sprint 11 for TRU 18522 start here
String sSegement = "" ;
if(sCTXcompanyName != null && "JNJ".equals(sCTXcompanyName))
	{
		sSegement = "Enterprise" ;
	}
	else {
		sSegement = sCTXcompanyName ;
	}

//Added by Xcapa team in sprint 11 for TRU 18522 end here

out.clear();
response.setContentType("text/javascript; charset=" + response.getCharacterEncoding());
%>

<%@ page import = "com.matrixone.apps.framework.ui.UINavigatorUtil" %>



function preProcessCreatePD(){
		//brought on top to make Owner field uneditable - START
	populateOwner();
	//brought on top to make Owner field uneditable - END

	//Added for AATL-24312 (GCC-074805)----Starts
	removeSpecImpactedSite();
	//Added for AATL-24312 (GCC-074805)----Ends

//Added for AATL-23635----Starts
validateSpecTypesForRestrictedCS();
//Added for AATL-23635----end


//Added for TRU-13471 ---- START
	//var typeSelected = document.emxCreateForm.elements['TypeActualId'].value;
	//Modified for UI translation
	var typeSelected = document.emxCreateForm.elements['TypeActual'].value;
	if(typeSelected == "Product Data Part")
	{
		document.emxCreateForm.elements['TypeActualDisplay'].value = "Select Type";
	}
//Added for TRU-13471 ---- END
	if(typeSelected != null && typeSelected != ""){
		emxFormReloadField("Policy");
		emxFormReloadField("Title");
	 	emxFormReloadField("Template");
	 	emxFormReloadField("ExpirationDate");
	 	var tempDesc = document.getElementById("TemplateDescriptionId")
	 	if(tempDesc!==null){
	 	tempDesc.disabled = "disabled";
	 	showTemplateDescription();
	 	}
	 	
		<!-- Added by TCS for TRU-6979,TRU-11103,TRU-11104 - BEGIN -->
	 	<!--changeExpirationDateVisibility();-->
		changeExpirationDateVisibilityBasedonStage(true);
		<!-- Added by TCS for TRU-6979,TRU-11103,TRU-11104 - END -->
	 	<!-- emxFormReloadField("DesignResponsibility"); -->
	 	reloadUOMField();
	 	<!-- changeCOLabel(); -->
		//Added for User Story AATL-24845 -- START
		checkIfNonRestrictedType();
		//Added for User Story AATL-24845 -- END
	}

	<!-- populateOwner(); -->
	<!-- basicClear('CO'); -->
	//commented to make Owner field uneditable - START
	//populateOwner();
	//commented to make Owner field uneditable - END

	//Added for 16629-Start
	populateDesignResp();
	//Added for 16629-End
	//Added for 18522-Start
	populateSegement();
	//Added for 18522-End
}

function preProcessCreatePDForXSE(){

	var typeSelected = document.emxCreateForm.elements['TypeActual'].value;
	if(typeSelected != null && typeSelected != ""){
	 	emxFormReloadField("Template");
	}

	showTemplateDescription();
}

function populateOwner() {
	$('[name="ObjectOwnerDisplay"]').val("<xss:encodeForJavaScript><%=loggedInUser %></xss:encodeForJavaScript>");
	$('[name="ObjectOwner"]').val("<xss:encodeForJavaScript><%=loggedInUser %></xss:encodeForJavaScript>");
	$('[name="ObjectOwnerOID"]').val("<xss:encodeForJavaScript><%=personId %></xss:encodeForJavaScript>");
	
	//added to make Owner field uneditable - START
	$('input[name=ObjectOwnerDisplay]').prop("readonly",true);
	$('input[name=btnObjectOwner]').remove();
	//added to make Owner field uneditable - END
}

//Added for 16629-Start
	function populateDesignResp() {
		$('[name="DesignResponsibilityDisplay"]').val("<%=sCTXcompanyName %>");
		$('[name="DesignResponsibility"]').val("<%=sCTXcompanyName %>");
		$('[name="DesignResponsibilityOID"]').val("<%=sCTXcompanyId %>");
	}
//Added for 16629-End

//Added for 18522-Start
	function populateSegement() {
		$('[name="SegementDisplay"]').val("<%=sSegement %>");
		$('[name="Segement"]').val("<%=sSegement %>");
		$('[name="SegementOID"]').val("<%=sCTXcompanyId %>");
		var vSegement= document.emxCreateForm.elements['Segement'];
		vSegement.readOnly = true;
	}
//Added for 18522-End

function showPDRevision(){
	<!-- //added by TCS for TRU-11226 : START -->
	emxFormReloadField("PharmaLifecycleStage");
	<!-- //added by TCS for TRU-11226 : END -->
   	emxFormReloadField("Revision");
}
  //IR-416225- Making "Design Responsibility" field non editable
function changeHandlerForDR(){
basicClear('ChangeTemplate');
basicClear('CO');
	emxFormReloadField("OwningRegion");

}

function changeHandlerForStatus(){
	emxFormReloadField("ExpirationDate");
	changeExpirationDateVisibility(true);
}

function changeHandlerForCO(){
var CTOID 	= document.getElementsByName('ChangeTemplateOID')[0].value;
var changeTemplate 	= document.getElementsByName('ChangeTemplate')[0].value;
if(CTOID == "" || changeTemplate == "")
{
basicClear('CO');
}
else
{
       document.forms[0]['CO'].value="CreateNew";
       document.forms[0]['CODisplay'].value="<xss:encodeForJavaScript><%=CPNUIUtil.getProperty(context, "emxCPN.DefaultCO.CreateNew", context.getSession().getLanguage()) %></xss:encodeForJavaScript>";
       document.forms[0]['COOID'].value="CreateNew";
 }
}

function validateTitle() {
	alert("inside validatetitle");
}

function changeHandlerForTemplate(){
	alert("template change handler");
	changeImpactedSitelabel();
var selTemplate = document.emxCreateForm.elements['TemplateId'];
if(selTemplate.options[selTemplate.selectedIndex].value!="")
	selTemplate.setAttribute("title",selTemplate.options[selTemplate.selectedIndex].getAttribute("title"));
else
	selTemplate.setAttribute("title","Template");
    	emxFormReloadField("TestMethodClassification");
		emxFormReloadField("TemplateDescription");
		disableRenderLangBasedOnTemplate();
    }

	function changeHandlerForTemplateInXSE(){
var selTemplate = document.emxCreateForm.elements['TemplateId'];
if(selTemplate.options[selTemplate.selectedIndex].value!="")
	selTemplate.setAttribute("title",selTemplate.options[selTemplate.selectedIndex].getAttribute("title"));
else
	selTemplate.setAttribute("title","Template");
    	emxFormReloadField("TemplateDescription");
    }


	function disableRenderLangBasedOnTemplate(){
	var tempId = document.getElementById("TemplateId").value;
	var rendLang = document.getElementById("Render LanguageId");
	if(rendLang == null){
		rendLang = document.getElementById("RenderLanguageId");
	}
	var prevObj = document.getElementsByName("objectId")[0];
	var objectId = "";
	if(prevObj !== undefined && prevObj !== null && prevObj !== ""){
	objectId = prevObj.value;
	}
	if(tempId!==null && tempId!==""){
   	var params = new Object();
	params.templateId=tempId;
	params.prevObjectId = objectId;
	if(objectId!==null && objectId!=="" && objectId != undefined){
	params.prevObjectId = objectId;
	}
    var jsonObj = JSON.stringify(params);
    var finalURL = "../cpn/emxCPNPDAjax.jsp?mode=ClaimedValues";

    $.ajax({
			dataType: "json",
            url: finalURL,
            type: "POST",
            data: jsonObj,
            contentType:"json",
            success: function (result) {
                    var serverResponse=result.serverResponse;
                    var isClaimedAttr=result.isClaimed;
           			if(isClaimedAttr){
            			serverResponse = serverResponse.replace(/\s/g,"");
            			rendLang.value = serverResponse;
            			if(rendLang.value=="") {
            				serverResponse = serverResponse.replace(/\s/g,"_");
            				rendLang.value = serverResponse;
            			}
            			  var lngth = rendLang.options.length;
            			  for(var i=0; i<lngth; i++){
	            			  if(rendLang.options[i].value !== serverResponse){
	            			  	rendLang.setAttribute("readonly","readonly");
	            			  	rendLang.options[i].disabled=true;
	            			  }
            			}
            		} else {
            		rendLang.removeAttribute("readonly");
	            			var lngth = rendLang.options.length;
	            			for(var i=0; i<lngth; i++){
	            			  rendLang.removeAttribute("readonly");
	            			  	rendLang.options[i].disabled=false;
	            			}
	            			rendLang.value = serverResponse;
            		}
               	}
           });
	}
	}
	

	function showPDTs(){
		emxFormReloadField("Policy");
		<!-- //Added by TCS for TRU-6979,TRU-11103,TRU-11104 - BEGIN -->
		emxFormReloadField("ExpirationDate");
		<!--changeExpirationDateVisibility(true);-->
		changeExpirationDateVisibilityBasedonStage(true);
		<!-- //Added by TCS for TRU-6979,TRU-11103,TRU-11104 - END -->
		<!-- //added by TCS for TRU-11226 : START -->
		emxFormReloadField("PharmaLifecycleStage");
    	emxFormReloadField("Template");
    	showTemplateDescription();
    	<!-- changeCOLabel(); -->
	}
	
	
	
	
	function validateTitleChars() {
		alert("inside validatetitle");
		var title = document.getElementById("TitleId").value;
		
		var maxLength = 30;
		if(title.trim() > 30) {
			alert("Title is more than 30 chars");
		}
		return true;
	}
		
		function changeImpactedSitelabel()
	{
		var selTemplate = document.emxCreateForm.elements['TemplateId'];
		var strName = selTemplate.options[selTemplate.selectedIndex].text;
		var excludeList = "<%=strImpactedSiteExclusionList%>";

		var i;
		var array = excludeList.split(',');
		var result_style = document.getElementById('calc_Impacted Site');
		var result_style_height = result_style.style.height;

		var found = "no";
		for(i = 0; i<array.length; i++) {
			var option1 = array[i];
			if(strName == array[i])
			{
				document.getElementById("calc_Impacted Site").childNodes[0].className = "createLabel";
				result_style.style.display='none';
				document.getElementsByName('Impacted SiteDisplay')[0].value="";
				document.getElementsByName('Impacted Site')[0].value="";
				found = "yes";
				break;
			}
		}
		if ( found == "no" )
		{
			result_style.style.display='';
			document.getElementById("calc_Impacted Site").childNodes[0].className = "createLabelRequired";
		}
	}
	
	

	function validateImpactedSites()
	{
		//Added for AATL-23531 -- STARTS
		if (checkForValidMarkeingCompanys() == false) {
			return false;
		}
		//Added for AATL-23531 -- ENDS
		var selTemplate = document.emxCreateForm.elements['TemplateId'];
		var strName = selTemplate.options[selTemplate.selectedIndex].text;
		var excludeList = "<%=strImpactedSiteExclusionList%>";

		var i;
		var array = excludeList.split(',');
		var result_style = document.getElementById('calc_Impacted Site');
		var found = "no";
		for(i = 0; i<array.length; i++) {
			var option1 = array[i];

			if(strName == array[i])
			{
				found = "yes";
				document.getElementsByName('Impacted SiteDisplay')[0].value="";
				document.getElementsByName('Impacted Site')[0].value="";
				var val = document.getElementsByName('Impacted SiteDisplay')[0].value;
				if( val=="" )
				{
				return true;
				}
				break;
			}
		}
		if (found == "no")
		{
			var val=document.getElementsByName('Impacted SiteDisplay')[0].value;
			if (val=="")
			{
			alert("<%=EnoviaResourceBundle.getProperty(context,"emxCPNStringResource",context.getLocale(),"emxCPN.CreateProductData.Message.BlankImpactedSite")%>");
			return false;
			}
			else
			{
			return true;
			}
		}

	}

	function checkForValidMarkeingCompanys() {

		var val=document.getElementsByName('Impacted SiteDisplay')[0].value;
		var mclov = "<%=mcCompanysLoV%>";
		if (val != "") {
			//alert(val);
			//alert('checkForValidMarketingCompanys' + "<%=mcCompanysLoV%>");
			if (val.indexOf("MC-") == -1) {
				//no MC selected
				return true;
			} else {
				var jsarray =  new Array();
				jsarray = val.split(', ');
				//alert(jsarray.length);

				for(i = 0; i<jsarray.length; i++) {
					var site = jsarray[i];
					//alert(mclov);
					if ((site.indexOf("MC-") !== -1) && (mclov.indexOf(site.trim() + "|=") == -1)) {
						alert('Impacted Site ' + site + ' is missing from Marketing Company LoV list. Select a different MC to proceed!');
						return false;
						break;
					}

				}

				return true;
			}
		}
	}

     function changeExpirationDateVisibility(displayAlert)
	 {
	        var status= document.emxCreateForm.elements['Status'];
	        if(status == null){
	        	status = document.emxCreateForm.elements['status'];
	        }
	        var expirationDate= document.emxCreateForm.elements['ExpirationDate'];
			<!-- XSSOK -->
	        if (status.value != "<%=strSpecCategoryInterim%>" && status.value != "<%=strSpecCategoryExperimental%>" )
	        {

	            	var mssg = "<%=EnoviaResourceBundle.getProperty(context,"emxCPNStringResource",context.getLocale(),"emxCPN.CreateProductData.Message.ExpirationDateIsNotEditableWhenPermanent")%>";
	            	expirationDate.title = mssg;
	            expirationDate.readOnly = true;
	           expirationDate.nextSibling.style.visibility="hidden";
	        } else
	        {
	        	expirationDate.title = $('label[for="ExpirationDate"]').get(0).innerHTML;
	            expirationDate.disabled = false;
	            expirationDate.nextSibling.style.visibility = "visible";

	        }
	    }
		
		//Added by TCS for TRU-6979,TRU-11103,TRU-11104 - BEGIN

		function changeExpirationDateVisibilityBasedonStage(displayAlert)
	 {
			try{
			var stage= document.emxCreateForm.elements['Stage'];
			var expirationDate= document.emxCreateForm.elements['ExpirationDate'];
			if(stage!=null && stage!=""&& stage.value!= undefined && stage.value == "<%=strSpecStageCommercial%>"){
				expirationDate.readOnly = true;
				expirationDate.nextSibling.style.visibility="hidden";
			}
			else
	        {
	            expirationDate.disabled = false;
	            expirationDate.nextSibling.style.visibility = "visible";

	        }
			}
			catch (e)
			{
			 alert ("Error"+e);
			}
	    }

  function validateExpDateforStage()
    {
    	var expDate = document.forms[0].ExpirationDate_msvalue.value;
    	var stage = document.forms[0].Stage.value;

		expDate = new Date(parseInt(expDate));
		var today = new Date();
		if (today.getFullYear() < 1950)
	    {
	      today.setFullYear(expDate.getFullYear() + 100);
	    }
	    if (expDate.getFullYear()< 1950)
	    {
	        expDate.setFullYear(expDate.getFullYear() + 100);
	    }

		expDate.setHours(23);
		expDate.setMinutes(59);
		expDate.setSeconds(59);
		expDate.setMilliseconds(999);

		var numberOfDays = (Date.parse(expDate) - Date.parse(today))/86400000;
		numberOfDays = Math.floor(numberOfDays);
		//-----------------Modified for AATL-21555------------------start-------------
		//if( stage != "<%=strSpecStageCommercial%>" && numberOfDays > 365) {
		if( stage != "<%=strSpecStageCommercial%>" && numberOfDays > 730) {
		//-----------------Modified for AATL-21555------------------end-------------
			alert("<%=EnoviaResourceBundle.getProperty(context, "emxCPNStringResource", context.getLocale(), "emxCPN.Common.ExpirationDate.BeyondRangeforDevelopment") %>");
			return false;
		} else if(numberOfDays < 0)	{
			alert("<%=EnoviaResourceBundle.getProperty(context,"emxCPNStringResource",context.getLocale(),"emxCPN.Common.ValidationErrorMessage.ExpirationDate")%>");
			return false;
		} else{
			return true;
		}
    }
    		//Added by TCS for TRU-6979,TRU-11103,TRU-11104 - END

 function changeCOLabel() {
	var stage 	= '';
	var canAttachECOtoPD	= true;
	if(document.emxCreateForm.Stage)

	{
	canAttachECOtoPD = canAttachECO(document.emxCreateForm.Stage.value);
	}
	if(canAttachECOtoPD){
		document.getElementById("calc_ChangeTemplate").childNodes[0].className = "labelRequired";
		document.getElementById("calc_CO").childNodes[0].className = "labelRequired";
	}else{
		document.getElementById("calc_ChangeTemplate").childNodes[0].className = "label";
		document.getElementById("calc_CO").childNodes[0].className = "label";
	}
}
function canAttachECO(stage){
	<%
	String str = "";
	itr = slStageListToConnectCO.iterator();
	while(itr.hasNext()){
		str = (String)itr.next();
		//TO DO - need to check the issue with Internationalization of Stage attribute value as both display and used value are same
		%>
		<!-- XSSOK -->
		if(stage!=null && stage!="" && (stage=='<%=str%>' || stage== '<%=strNotApplicableStage%>') ){
			return true;
	}
	<%}%>
	return false;
}

 function validateCT()
 {

   	var CT 	= document.getElementsByName('ChangeTemplateOID')[0].value;
 var canAttachECOtoPD = canAttachECO(document.emxCreateForm.Stage? document.emxCreateForm.Stage.value : "");


	if(canAttachECOtoPD == true && (CT==null || CT==""))
	{
		alert("<%=EnoviaResourceBundle.getProperty(context,"emxCPNStringResource",context.getLocale(),"emxCPN.Common.ValidationErrorMessage.ChangeTemplate")%>");
		return false;
	}else{
		return true;
	}
  }

    // Utitliy method to check if null or empty string
    // returns true if undefined, null, "", NaN is passed
   function isNullOrEmpty(val) {
        return !val;
   }
  function validateCO()
 {
   	var CO 	= $('input[name="CODisplay"]').val();
   	var CT 	= $('input[name="ChangeTemplateDisplay"]').val();
	var canAttachECOtoPD = canAttachECO(document.emxCreateForm.Stage? document.emxCreateForm.Stage.value : "");
	if((!isNullOrEmpty(CT) || canAttachECOtoPD == true) && (isNullOrEmpty(CO)))
	{
		alert("<%=EnoviaResourceBundle.getProperty(context,"emxCPNStringResource",context.getLocale(),"emxCPN.Common.ValidationErrorMessage.CO")%>");
		return false;
	}else{
		return true;
	}
  }


   function validateExpDate()
    {
    	var expDate = document.forms[0].ExpirationDate_msvalue.value;
    	var status = document.forms[0].Status.value;
    	expDate = new Date(parseInt(expDate));
    	<!--  R420-IR-601604 -The time is set to zero to allow the current date to be set as Expiration Date. -->
    	expDate.setHours(0,0,0,0);
		var today = new Date();
	    today.setHours(0,0,0,0);
		if (today.getFullYear() < 1950)
	    {
	      today.setFullYear(expDate.getFullYear() + 100);
	    }
	    if (expDate.getFullYear()< 1950)
	    {
	        expDate.setFullYear(expDate.getFullYear() + 100);
	    }
		var numberOfDays = (Date.parse(expDate) - Date.parse(today))/86400000;
		if(numberOfDays < 0)	{
			alert("<%=EnoviaResourceBundle.getProperty(context,"emxCPNStringResource",context.getLocale(),"emxCPN.Common.ValidationErrorMessage.ExpirationDate")%>");
			return false;
		} else{
			return true;
		}
    }

function changeHandlerForCharacteristic(){
document.getElementById('calc_Policy').getElementsByTagName('label')[0].innerHTML="<xss:encodeForJavaScript><%=CPNUIUtil.getProperty(context, "emxCPN.Common.Policy", context.getSession().getLanguage()) %></xss:encodeForJavaScript>";
emxFormReloadField("table");

}

function validateCharacteristic(){

var characteristicType=document.getElementById('CharacteristicTypeId').value;
if(characteristicType==null || characteristicType=="")
	{
		alert("<%=EnoviaResourceBundle.getProperty(context,"emxCPNStringResource",context.getLocale(),"emxCPN.Characteristic.InvalidInputMsg")%>");
		return false;
	}else{
		return true;
	}
	}
function preProcessSharedTable(){
document.getElementById('calc_Policy').getElementsByTagName('label')[0].innerHTML="<xss:encodeForJavaScript><%=CPNUIUtil.getProperty(context, "emxCPN.Common.Policy", context.getSession().getLanguage()) %></xss:encodeForJavaScript>";
document.getElementById('PolicyId').options[1].setAttribute("selected","selected");
emxFormReloadField("table");

}

function showTemplateDescription(){
	var templateSelect = document.emxCreateForm.elements['TemplateId'];
	var i,str;
	var oid=new Array();
	for(i=0;i<templateSelect.length;i++)
	{

	oid[i]=templateSelect.options[i].value;
	}
	var encodedPipeForURL = encodeURIComponent("|");   
	var txt=oid.join(encodedPipeForURL);
	var url="../cpn/emxCPNPDAjax.jsp";
 	url=url+"?selectedVal="+txt;
	url=url+"&mode=templateDescription";
	url=url+"&from=emxCreateForm";

	var oXMLHTTP22 = emxUICore.createHttpRequest();
	oXMLHTTP22.open("post", url, true);
	var ResponseText = "";
	oXMLHTTP22.onreadystatechange = function() {
		if (oXMLHTTP22.readyState == 4) {
			  ResponseText = oXMLHTTP22.responseText;
			  var selTemplate = document.emxCreateForm.elements['TemplateId'];
			  if(ResponseText != "") {
				ResponseTextArray = ResponseText.split("|");
				for(var i=0;i<ResponseTextArray.length;i++)
				{
						if(selTemplate.options[i] != undefined){
						selTemplate.options[i].setAttribute("title",ResponseTextArray[i].trim());

					}
				}
			}

			if(selTemplate.options[selTemplate.selectedIndex].value!="")
				selTemplate.setAttribute("title",selTemplate.options[selTemplate.selectedIndex].getAttribute("title"));
			else
				selTemplate.setAttribute("title","Template");
		}
	}

	oXMLHTTP22.send("");
}

  //UOM Management - start
function reloadUOMField(){
    emxFormReloadField("UOM");
}
//UOM Management - End
//Same method is added in template Need to remove this method after validation
function validateChangeOrder(){
	var CO 	= $('input[name="ChangeOrderDisplay"]').val();
	var CT 	= $('input[name="ChangeTemplateDisplay"]').val();
	if( !isNullOrEmpty(CT.trim()) && (isNullOrEmpty(CO))) {
		alert("<%=EnoviaResourceBundle.getProperty(context,"enoTemplateStringResource",context.getLocale(),"enoTemplate.ValidationErrorMessage.PleaseCheckValidECO")%>");
		return false;
	}
	return true;
}

//Added by Tarique for Bug Fix- Issue #7- Starts
function generateChooserURLForImpactedSite(formField) {
		 var formFieldName          = formField.name;
        var actualFormFieldName    = formFieldName.substring(3);
	 var displayFormFieldName   = actualFormFieldName + "Display";
        var objForm                = document.forms[0];
        var actualFormField        = objForm.elements[actualFormFieldName];
	var displayFormField        = objForm.elements[displayFormFieldName];
        var selValues              = actualFormField.value;
	var displayValues           = displayFormField.value;

        if(selValues=="" || displayValues==""){
            selValues="null";
        } else {
            selValues=selValues.replace(/&/g, "am-percent"); //remove & with am-percent
        }
         /*var URL = "../common/jnj_emxFullSearch.jsp?field=TYPES=type_Organization:CURRENT=policy_Organization.state_Active&showInitialResultsCustom=false&table=AEFOrganizationChooserDetails&selectedValue="+selValues+"&selection=multiple&fieldNameActual="+actualFormFieldName+"&fieldNameDisplay="+actualFormFieldName+"Display&fieldNameOID="+actualFormFieldName+"OID&submitURL=JNJAEFSearchUtil.jsp&includeOIDprogram=enoTemplateUI:getBusinessUnits";*/
		 
		 var URL = "../common/emxFullSearch.jsp?field=TYPES=type_Organization:CURRENT=policy_Organization.state_Active&form=AEFSearchOrganizationForm&selectedValue="+selValues+"&selection=multiple&table=AEFOrganizationChooserDetails&includeOIDprogram=enoTemplateUI:getBusinessUnits&showInitialResultsCustom=false&fieldNameActual="+actualFormFieldName+"&fieldNameDisplay="+actualFormFieldName+"Display&fieldNameOID="+actualFormFieldName+"OID&submitURL=../common/AEFSearchUtil.jsp";
		 
		 showChooser(URL,700,600);
    }
//Added by Tarique for Bug Fix- Issue #7- Ends

//Added for AATL-23635----Starts
	function validateSpecTypesForRestrictedCS()
	{
		var typeName = document.getElementsByTagName("input");
		for(i = 0; i<typeName.length; i++)
		{
			//Modified for UI translation
			if (typeName[i].name == "TypeActual")
			{
				var specType = typeName[i].value;
			}
		}
		var sRestType = "<%=strRestrictedType%>";
		var sResttypeList = sRestType.split(",");
		var isApplicable = false;
		for(j = 0; j<sResttypeList.length; j++)
		{
			if (sResttypeList[j] == specType)
			{
				isApplicable = true;
				break;
			}
		}



			//alert(personCollabSpace);
			if (isApplicable == true)
			{
				var sAssignedRestType = "<%=sRestrictedAssignment%>";
				var sAssignedResttypeList = sAssignedRestType.split(",");
				var hasAccess = false;
				for(k = 0; k<sAssignedResttypeList.length; k++)
				{
					if (sAssignedResttypeList[k] == specType)
					{
						hasAccess = true;
						break;
					}
				}
				if (hasAccess == false) {
					//Modified for UI translation
					var specDisplay = document.emxCreateForm.elements['TypeActualDisplay'].value;
					var alertmessage = "<%=EnoviaResourceBundle.getProperty(context,"enoTemplateStringResource",context.getLocale(),"enoTemplate.ValidationErrorMessage.FDandMWICreationInRestrictedCS")%>";
					alertmessage = alertmessage.replace("<<sType>>", specDisplay);
					document.emxCreateForm.elements['TypeActualDisplay'].value = "Select Type";
					var collabMap = "<%=sCollabMap%>";
					var collabMapList = collabMap.split("|");
					var collabSpace = "";
					for (itr1 = 0; itr1 < collabMapList.length; itr1++) {
						var collabEntry = collabMapList[itr1].split(":");
						if (collabEntry[0] == specType) {
							collabSpace = collabEntry[1];
						}
					}
					alertmessage = alertmessage.replace("<<sCollabSpace>>", collabSpace);
					alert(alertmessage);
					//alert("You do not have sufficient priviledges to create"+specType+"Specifications in " + "<%=strRestrictedCS%>"+ "Please change your security context accordingly");
					//alert(specType+" "+"<%=EnoviaResourceBundle.getProperty(context,"enoTemplateStringResource",context.getLocale(),"enoTemplate.ValidationErrorMessage.FDandMWICreationInRestrictedCS")%>");
					//alert("You need originator access in Consumer Restricted Collaborative Space to perform this action.");
					return false;
				}
			}

		return true;
	}
//Added for AATL-23635-----Ends


//Added for AATL-24453 (GCC-074033)----Starts
	function validateSpecTypesForRestrictedCSDynamic()
	{
		var returnStatus = true;
		var xhttp = new XMLHttpRequest();
		xhttp.onreadystatechange = function() {
		if (this.readyState == 4 && this.status == 200) {
		var ajaxtext = this.responseText.trim();
		var ajaxvalues = ajaxtext.split("~");
		var typeName = document.getElementsByTagName("input");
		for(i = 0; i<typeName.length; i++)
		{
			if (typeName[i].name == "TypeActual")
			{
				var specType = typeName[i].value;
			}
		}
		var sRestType = ajaxvalues[1];
		var sResttypeList = sRestType.split(",");
		var isApplicable = false;
		for(j = 0; j<sResttypeList.length; j++)
		{
			if (sResttypeList[j] == specType)
			{
				isApplicable = true;

				break;
			}
		}
			if (isApplicable == true)
			{
				var sAssignedRestType = ajaxvalues[2];
				var sAssignedResttypeList = sAssignedRestType.split(",");
				var hasAccess = false;
				for(k = 0; k<sAssignedResttypeList.length; k++)
				{
					if (sAssignedResttypeList[k] == specType)
					{
						hasAccess = true;
						break;
					}
				}
				if (hasAccess == false) {
					var specDisplay = document.emxCreateForm.elements['TypeActualDisplay'].value;
					var alertmessage = "<%=EnoviaResourceBundle.getProperty(context,"enoTemplateStringResource",context.getLocale(),"enoTemplate.ValidationErrorMessage.FDandMWICreationInRestrictedCS")%>";
					alertmessage = alertmessage.replace("<<sType>>", specDisplay);
					var collabMap = ajaxvalues[0];
					var collabMapList = collabMap.split("|");
					var collabSpace = "";
					for (itr1 = 0; itr1 < collabMapList.length; itr1++) {
						var collabEntry = collabMapList[itr1].split(":");
						if (collabEntry[0] == specType) {
							collabSpace = collabEntry[1];
						}
					}
					alertmessage = alertmessage.replace("<<sCollabSpace>>", collabSpace);
					alert(alertmessage);
					returnStatus = false;
				}
			}
		}
	};
	xhttp.open("GET", "jnj_getRestrictedCollabSpace.jsp?"+Math.random(), false);
	xhttp.send();
	return returnStatus;
	}
	//Added for AATL-24453(GCC-074033)----Ends
	
	//Added  for AATL-24312 (GCC-074805) for removal of Impacted Site --- STARTS
	function removeSpecImpactedSite()
	{
		var els = document.getElementsByTagName("a");
		for (var i = 0, l = els.length; i < l; i++) {
			var el = els[i];
			if (el.href === 'javascript:basicClear(\'Impacted SiteDisplay\')') {
				el.href = "javascript:showChooser('../components/jnj_ImpactedSiteChooserFS.jsp?targetLocation=popup&selection=multiple&HelpMarker=emxhelpsearch',700,600)";

			}
		}
	}
	//Added  for AATL-24312 (GCC-074805) for removal of Impacted Site --- ENDS

//Added for User Story AATL-24510 -- START
String.prototype.replaceAll = function(search, replacement) {
    var target = this;
    return target.split(search).join(replacement);
};
if (!String.prototype.startsWith) {
  String.prototype.startsWith = function(searchString, position) {
    position = position || 0;
    return this.indexOf(searchString, position) === position;
  };
}

var interVal = setInterval(findCalAnchor, 500);
var waitTime = 0;

function findCalAnchor(){
	waitTime += 500;
	var allAnchorTag = getDateChooser("javascript:showCalendar");
	for (var aItr = 0; aItr < allAnchorTag.length; aItr++) {
		//alert("Found");
		clearInterval(interVal);
		var splitHref = allAnchorTag[aItr].href.split(",");
		var dateField = trim(splitHref[1]);
		dateField = dateField.replaceAll("'", "");
		var allEndTag = getDateChooser("javascript:moveToEndDate('"+dateField+"')");
		//alert(calAnchorTag.id);
		if (allEndTag.length === 0) {
			var aEndDate = document.createElement('a');
			aEndDate.href = "javascript:moveToEndDate('"+dateField+"')";
			aEndDate.style.visibility = allAnchorTag[aItr].style.visibility;
			var imgEndDate = document.createElement("img"); 
			imgEndDate.alt = "31 Dec 9999";
			imgEndDate.src = "../common/images/31Dec.png";
			imgEndDate.border = "0";
			imgEndDate.style.padding = "0px 0px 0px 3px";
			aEndDate.appendChild(imgEndDate);
			allAnchorTag[aItr].parentNode.insertBefore(aEndDate, allAnchorTag[aItr].nextSibling);
		}
	}
	if(waitTime > 3000){
		clearInterval(interVal);
	}

}

function getDateChooser(searchStr){
	var finalTag = new Array();
	var allAnchorTag = document.getElementsByTagName('a');
	//alert(allAnchorTag.length);
	for (var aItr = 0; aItr < allAnchorTag.length; aItr++) {
		//alert(allAnchorTag[aItr].href);
		if(allAnchorTag[aItr].href != null){
			var hrefStr = allAnchorTag[aItr].getAttribute("href");
			if(hrefStr.startsWith(searchStr)){
				finalTag.push(allAnchorTag[aItr]);
			}
		}
	}
	return finalTag;
}

function moveToEndDate(dateField){
	var dEndDate = new Date();
	dEndDate.setFullYear(9999, 11, 31);
	dEndDate.setHours(0);
	dEndDate.setMinutes(0);
	dEndDate.setSeconds(0);
	var strURL = URL_GET_CALENDAR_SELECT;
	strURL = emxUICore.addURLParam(strURL, "day=" + dEndDate.getDate());
	strURL = emxUICore.addURLParam(strURL, "mon=" + (dEndDate.getMonth()+1));
	strURL = emxUICore.addURLParam(strURL, "year=" + dEndDate.getFullYear());
	var strData = emxUICore.getData(strURL);
/* 	var calAnchorTag = document.getElementById("formDateChooser");
	var splitHref = calAnchorTag.href.split(",");
	var dateField = trim(splitHref[1]);
	dateField = dateField.replaceAll("'", "");
	alert(dateField); */
	document.getElementById(dateField).value = strData;
	document.getElementById(dateField+"AmPm").value = dEndDate.getTime();
	document.getElementsByName(dateField+"_msvalue")[0].value = dEndDate.getTime();
	
}
//Added for User Story AATL-24845 -- START
function checkIfNonRestrictedType() {
	var imputElement = document.getElementsByTagName("input");
	for(i = 0; i<imputElement.length; i++)
	{
		//Modified for UI translation
		if (imputElement[i].name == "TypeActual")
		{
			var specSelectedType = imputElement[i].value;
		}
	}
	var sRestType = "<%=strRestrictedType%>";
	var sResttypeList = sRestType.split(",");
	var isNonRestType = true;
	for(j = 0; j<sResttypeList.length; j++)
	{
		if (sResttypeList[j] == specSelectedType)
		{
			isNonRestType = false;
			break;
		}
	}
	if (isNonRestType == true && specSelectedType != "Product Data Part") {
		var sDefaultCollabSpace = "<%=sCTXCollabSpaceName%>";
		if (sDefaultCollabSpace.indexOf('Restricted') !== -1) {
			var specDisplay = document.emxCreateForm.elements['TypeActualDisplay'].value;
			var messagePart1 = "<%=EnoviaResourceBundle.getProperty(context,"emxCPNStringResource",context.getLocale(),"emxCPN.RestrictedCollab.Spec.Message1")%>";
			var messagePart2 = "<%=EnoviaResourceBundle.getProperty(context,"emxCPNStringResource",context.getLocale(),"emxCPN.RestrictedCollab.Spec.Message2")%>";
			var messagePart3 = "<%=EnoviaResourceBundle.getProperty(context,"emxCPNStringResource",context.getLocale(),"emxCPN.RestrictedCollab.Spec.Message3")%>";
			var message = messagePart1+sDefaultCollabSpace+" "+messagePart2+specDisplay+" "+messagePart3;
			var result = confirm(message);
			if (result == false) {
				window.close();
			}
		}
	}
}
//Added for User Story AATL-24845 -- END
function validateUOMField()
{
	var UOMVal = document.emxCreateForm.UOM;
	if(UOMVal)
		return true;
	else
	{
		alert("<%=EnoviaResourceBundle.getProperty(context,"emxCPNStringResource",context.getLocale(),"emxCPN.Alert.UOMValidation")%>");
		return false;
	}
}


