import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.InputStreamReader;
import java.io.OutputStream;
import java.io.OutputStreamWriter;

import com.matrixone.apps.domain.DomainConstants;
import com.matrixone.apps.domain.DomainObject;
import com.matrixone.apps.domain.util.ContextUtil;
import com.matrixone.apps.domain.util.EnoviaResourceBundle;
import com.matrixone.apps.domain.util.FrameworkUtil;
import com.matrixone.apps.domain.util.MapList;
import com.matrixone.apps.domain.util.PropertyUtil;
import com.matrixone.apps.framework.ui.UIUtil;
import java.time.LocalDateTime;
import java.time.ZoneId;
import java.time.ZonedDateTime;
import java.time.format.DateTimeFormatter;

import matrix.db.JPO;
import matrix.db.BusinessInterface;
import matrix.db.Context;
import matrix.db.MatrixWriter;
import matrix.util.StringList;

import javax.net.ssl.HttpsURLConnection;
import javax.net.ssl.SSLContext;
import javax.net.ssl.TrustManager;
import javax.net.ssl.X509TrustManager;

import org.apache.commons.codec.binary.Base64;
import org.apache.http.client.utils.URIBuilder;
import org.apache.http.entity.StringEntity;

import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.net.HttpURLConnection;
import java.net.URL;
import java.net.URLConnection;
import java.nio.charset.StandardCharsets;
import java.util.LinkedHashMap;
import java.util.Map;
import org.apache.jena.atlas.json.JSON;
import org.json.JSONArray;
import org.json.JSONObject;
import java.net.http.HttpClient;
import java.util.LinkedHashSet;
import java.util.Set;
import java.util.Arrays;
import java.util.Iterator;
import java.util.HashMap;
import java.lang.reflect.Field;
import java.lang.reflect.Modifier;

import com.matrixone.apps.domain.util.PersonUtil;

public class TRUSpecRightDataLoader_mxJPO {

	// Global variable declaration
	public Context ctx = null;
	BufferedWriter writer = null;
	MatrixWriter mxWriter = null;
	MatrixWriter mxWriter1 = null;
	public static String sVault = "";
	public static String ACCESS_TOKEN="";
	public static String INPUT_JSON="";
	public static String SPECRIGHT_USERNAME ="";
	public static String SPECRIGHT_PASSWORD ="";
	public static String TOKEN_URL ="";
	public static final String ATTRIBUTE_TRANSACTION_STATUS = PropertyUtil.getSchemaProperty("attribute_TransactionStatus");
	public static final String ATTRIBUTE_OUTPUT_XML = PropertyUtil.getSchemaProperty("attribute_OutputXML");
	public static final String ATTRIBUTE_DC_SPEC_NUMBER = PropertyUtil.getSchemaProperty("attribute_DCSpecNumber");
	public static final String ATTRIBUTE_DC_SPEC_ID = PropertyUtil.getSchemaProperty("attribute_DCSpecID");
	public static final String ATTRIBUTE_TRANSACTION_EVENT = PropertyUtil.getSchemaProperty("attribute_TransactionEvent");
	public static final String ATTRIBUTE_INPUT_XML = PropertyUtil.getSchemaProperty("attribute_InputXML");
	public static final String ATTRIBUTE_ARTWORK_ID = PropertyUtil.getSchemaProperty("attribute_DCArtworkID");
	public static final String ATTRIBUTE_SPECRIGHT_API_TOKEN = PropertyUtil.getSchemaProperty("attribute_SpecRightAPIToken");
	public static final String ATTRIBUTE_SPECRIGHT_SPEC_NUMBER = PropertyUtil.getSchemaProperty("attribute_SpecrightObjName");
	private static final BusinessInterface INTERFACE_TRUSPECRIGHTINTERFACE = new BusinessInterface("INTERFACE_TRUSPECRIGHTINTERFACE", null);

	public TRUSpecRightDataLoader_mxJPO (Context context, String[] args) throws Exception {
		// Added check to throw an exception if the context is null
		if(context == null)
			throw new Exception("Inside TRUSpecRightDataLoader constructor, the context is null");
		writer = new BufferedWriter(new MatrixWriter(context));
		mxWriter = new MatrixWriter(context);
		ctx = context;
		sVault = PropertyUtil.getSchemaProperty(ctx, "vault_eServiceProduction");
		SPECRIGHT_USERNAME = EnoviaResourceBundle.getProperty(context, "TRUSpecRightDataLoader",
				context.getLocale(), "TRUSpecRightDataLoader.SpecRight.UserName");
		System.out.println("****SPECRIGHT_USERNAME***"+SPECRIGHT_USERNAME);
		SPECRIGHT_PASSWORD = EnoviaResourceBundle.getProperty(context, "TRUSpecRightDataLoader",
				context.getLocale(), "TRUSpecRightDataLoader.SpecRight.Password");
		System.out.println("****SPECRIGHT_PASSWORD***"+SPECRIGHT_PASSWORD);
		TOKEN_URL = EnoviaResourceBundle.getProperty(context, "TRUSpecRightDataLoader",
				context.getLocale(), "TRUSpecRightDataLoader.SpecRight.AcessTokenUrl");
		System.out.println("****TOKEN_URL***"+TOKEN_URL);
	}
	public TRUSpecRightDataLoader_mxJPO () throws Exception {
	}

	/**
	 * @author : Pramit Mitra (pmitra01)
	 * @purpose : Method to determine if a specification is created from SpecRight (AATL-).
	 * @return : true (if created from SpecRight) or false
	 */
	public boolean isSpecRightSpec(Context context, String sSpecId) throws Exception
	{
		boolean retFlag = false;

		try
		{
			if(context != null)
			{
				DomainObject doSpec = new DomainObject(sSpecId);

				if(doSpec != null)
				{
					String sSpecRightNum = doSpec.getInfo(context,"attribute[" + ATTRIBUTE_SPECRIGHT_SPEC_NUMBER + "]");

					if(UIUtil.isNotNullAndNotEmpty(sSpecRightNum))
					{
						retFlag = true;
					}
				}
			}
		}
		catch(Exception e)
		{
			e.printStackTrace();
		}
		finally
		{
			return retFlag;
		}
	}
	/**
	 * @author : Pramit Mitra (pmitra01)
	 * @purpose : Method to determine if a specification created (or not created) from SpecRight can be revised/copied/edited from the UI (AATL-).
	 * @param : MODE (within map) = REVISE/COPY/EDIT
	 * @return : true (if allowed) or false
	 */
	public boolean canModifySpecRightSpec(Context context, String[]args) throws Exception
	{
		HashMap programMap = (HashMap)JPO.unpackArgs(args);
		boolean retFlag = false;

		try
		{
			String sSpecId = (String)programMap.get("SPEC_ID");
			String sMode = (String)programMap.get("MODE");
			String sSpecRight = "NonSpecRight";

			if(isSpecRightSpec(context,sSpecId))
			{
				sSpecRight = "SpecRight";
			}

			String sSpecType = new DomainObject(sSpecId).getInfo(context,DomainConstants.SELECT_TYPE);
			String sPropKey = "TRUSpecRightDataLoader." + sSpecRight + "." + sSpecType.replaceAll(" ","") + "." + sMode + ".PermittedRoles";
			String sPermittedRoles = EnoviaResourceBundle.getProperty(context, "TRUSpecRightDataLoader", context.getLocale(), sPropKey);

			System.out.println("---canModifySpecRightSpec----sPropKey---"+sPropKey);
			System.out.println("---canModifySpecRightSpec----sPermittedRoles---"+sPermittedRoles);

			if(!sPropKey.equals(sPermittedRoles))
			{
				StringList slPermittedRoles = FrameworkUtil.split(sPermittedRoles, ",");
				System.out.println("---canModifySpecRightSpec----slPermittedRoles---"+slPermittedRoles);

				if(slPermittedRoles != null)
				{
					Iterator itr = slPermittedRoles.iterator();

					while(itr.hasNext())
					{
						String sRole = (String)itr.next();

						if(PersonUtil.hasAssignment(context, sRole))
						{
							retFlag = true;
							break;
						}
					}
				}
			}
			else
			{
				retFlag = true;
			}
			System.out.println("---canModifySpecRightSpec----retFlag---"+retFlag);
		}
		catch(Exception e)
		{
			e.printStackTrace();
		}
		finally
		{
			return retFlag;
		}
	}
	public void processSpecRightData(Context context, String[] args) throws Exception {

		ACCESS_TOKEN = generateToken(context, args);
		INPUT_JSON = getSpecData(context);
		readAndSplitInputJson(context);
	}
	public String generateToken(Context context, String[] args) throws Exception {
		URL url;
		OutputStream stream;
		OutputStreamWriter oStreamWrt;
		String jsonBodyKey = EnoviaResourceBundle.getProperty(context, "TRUSpecRightDataLoader",
				context.getLocale(), "TRUSpecRightDataLoader.SpecRight.AcessToken.ParameterKey");
		String jsonBodyValue = EnoviaResourceBundle.getProperty(context, "TRUSpecRightDataLoader",
				context.getLocale(), "TRUSpecRightDataLoader.SpecRight.AcessToken.ParameterValue");
		JSONObject json = new JSONObject();
		json.put(jsonBodyKey, jsonBodyValue);
		byte[] out = json.toString().trim().getBytes(StandardCharsets.UTF_8);
		String auth = SPECRIGHT_USERNAME + ":" + SPECRIGHT_PASSWORD;
		byte[] encodedAuth = Base64.encodeBase64(auth.getBytes());
		String authType = EnoviaResourceBundle.getProperty(context, "TRUSpecRightDataLoader",
				context.getLocale(), "TRUSpecRightDataLoader.SpecRight.AcessToken.AuthType");
		System.out.println("****authType***"+authType);

		String contentType = EnoviaResourceBundle.getProperty(context, "TRUSpecRightDataLoader",context.getLocale(), "TRUSpecRightDataLoader.SpecRight.AcessToken.ContentType");
		System.out.println("****contentType***"+contentType);

		String basicAuth  = authType+" "+new String(encodedAuth);
		System.out.println("...............basicAuth: "+basicAuth);
		int responseCode = 0;
		int retryCount = 0;
		while (responseCode != 200 && retryCount < 3) {
			try {
				url = new URL(TOKEN_URL);
				HttpsURLConnection https = (HttpsURLConnection)url.openConnection();
				https.setRequestMethod("POST");
				https.setDoOutput(true);
				https.setRequestProperty("Content-Type", contentType);
				https.setRequestProperty("Authorization", basicAuth);
				https.setConnectTimeout(60000);

				stream = https.getOutputStream();
				stream.write(out);
				// Flush the stream to ensure all data is sent
				stream.flush();

				responseCode = https.getResponseCode();
				StringBuilder response = new StringBuilder();
				if(responseCode==200) {
					BufferedReader in = new BufferedReader(
							new InputStreamReader(https.getInputStream()));
					String inputLine;
					while ((inputLine = in.readLine()) != null) {
						response.append(inputLine);
					}
					in.close();
					System.out.println(response.toString());
					JSONObject jo = new JSONObject(response.toString());
					ACCESS_TOKEN = jo.getString("access_token");
					System.out.println("...............accessToken: "+ACCESS_TOKEN);
				} else {
					System.out.println("...............responseCode: "+responseCode);
					System.out.println("...............response: "+response);
				}
			}catch (Exception e) {
				e.printStackTrace();
			}
			retryCount++;
		}
		return ACCESS_TOKEN;

	}
	public String getSpecData(Context context) throws Exception {
		URL url;
		String inputLine = "";
		String fieldKey = "fields";
		String fieldList = "Id,Name,specright__Status__c";
		System.out.println(fieldList);
		String filterKey = "filter";
		String INPUT_JSON = null;
		String filterList = "{\"SR_State__c\":\"Unpublished\"},{\"IsDeleted\":\"false\"}}";
		//URL obj = new URL("{{host}}/objects/specright__Specification__c?");
		int responseCode = 0;
		int retryCount = 0;
		while (responseCode != 200 && retryCount < 3) {
			try {
				URIBuilder uri = new URIBuilder("https://test.specright.com/v1/objects/specright__Specification__c?").addParameter(fieldKey, "FIELDS(ALL)").addParameter(filterKey, filterList);
				System.out.println(uri.toString());
				url = uri.build().toURL();
				HttpsURLConnection con = (HttpsURLConnection) url.openConnection();
				con.setRequestMethod("GET");
				//String accessToken = generateToken(context, ACCESS_TOKEN);
				String auth = "Bearer " + ACCESS_TOKEN;
				//con.setDoOutput(true);
				con.setRequestProperty("Content-Type", "application/x-www-form-urlencoded");
				con.setRequestProperty("x-user-id", "api@specright.com.kenvuedev");
				con.setRequestProperty("x-api-key", "he6rFkRDeEvrwAg9Dl70d3Fox0aNfmB82EwHQdzI");
				con.setRequestProperty("Authorization", auth);

				responseCode = con.getResponseCode();
				if(responseCode==200) {
					BufferedReader in = new BufferedReader(
							new InputStreamReader(con.getInputStream()));
					StringBuffer response = new StringBuffer();
					while ((inputLine = in.readLine()) != null) {
						response.append(inputLine);
					}
					in.close();
					System.out.println(response.toString());
					INPUT_JSON = response.toString();
				} else {

				}
			}catch (Exception e) {
				e.printStackTrace();
			}
			retryCount++;
		}
		System.out.println("**********IT IS IN GET SPEC DATA METHOD**********");
		return INPUT_JSON;
	}
	public String readAndSplitInputJson(Context context) throws Exception {
		String truObjId="";
		String sTxnId="";
		String truObjCurrent="";
		System.out.println("**********IT IS IN READ AND SPLIT DATA METHOD at Begining**********");
		HashMap<String, String> hmAttrMap = new HashMap<String, String>();
		HashMap<String,String> txAttributeMap = new HashMap<String, String>();
		System.out.println("*****--------------****** " +INPUT_JSON);
		JSONObject jsonObj = new JSONObject(INPUT_JSON.toString());
		System.out.println("*****--------------****** ");
		JSONArray ja_data = jsonObj.getJSONArray("data");
		int ja_data_length = ja_data.length();

		System.out.println("*****INPUT_JSON****** " +INPUT_JSON);
		System.out.println("*****hmAttrMap****** " +hmAttrMap);
		System.out.println("******txAttributeMap******** " +txAttributeMap);
		System.out.println("********ja_data_length********** " +ja_data_length);


		try {
			System.out.println("**********IT IS IN READ AND SPLIT DATA METHOD at TRY BLOCK**********");
			for(int i=0; i<ja_data_length; i++) 
			{
				JSONObject jObj = ja_data.getJSONObject(i);
				System.out.println("**********IT IS IN READ AND SPLIT DATA METHOD at FOR LOOP**********");
				sTxnId = FrameworkUtil.autoName(context,"type_Transaction","", "policy_Transaction", "vault_eServiceProduction"); 
				System.out.println("\n*** inside createSpecConcerto- sTxnId : "+sTxnId);
				DomainObject doTxn = DomainObject.newInstance(context, sTxnId);
				//txAttributeMap.put(ATTRIBUTE_INPUT_XML, jObj.toString());
				doTxn.addBusinessInterface(context, INTERFACE_TRUSPECRIGHTINTERFACE);
				doTxn.setAttributeValue(context, ATTRIBUTE_INPUT_XML, jObj.toString());
				doTxn.setAttributeValue(context, ATTRIBUTE_SPECRIGHT_API_TOKEN, ACCESS_TOKEN);
				doTxn.setDescription("SpecRight");
				doTxn.promote(context);

			}
		}catch(Exception ex) {
			ex.printStackTrace();
			System.out.println("**********IT IS IN READ AND SPLIT DATA METHOD at Catch BLOCK**********");
		}
		System.out.println("**********IT IS IN READ AND SPLIT DATA METHOD at the END**********");
		return null;

	}
	public String createSpec(Context context, HashMap<String, String> hmJsonFieldMap, String sTxnId) {
		String objType="";
		String sStage="";
		String tStage="";
		String tPolicy="";
		String specRightTemplate="";
		String specRightTemplateId="";
		String  sDesignResp="";
		String  sExpiration="";
		String strSpecId ="";
		String specRightOwnerId="";
		HashMap<String, String> hmCreateParam = new HashMap<String, String>();
		HashMap<String, String> requestMap = new HashMap<String, String>();
		HashMap<String, String> paramMap = new HashMap<String, String>();
		HashMap<String, HashMap<String, String>> hmPostProcessParam = new HashMap<String, HashMap<String, String>>();
		HashMap<String, String> hmAttrMap = new HashMap<String, String>();
		try {
			objType=jnjBomConstants_mxJPO.TYPE_PACKAGING_COMPONENT;
			sStage=hmJsonFieldMap.get("specright__Status__c");
			tStage=EnoviaResourceBundle.getProperty(context, "TRUSpecRightDataLoader",context.getLocale(), "TRUSpecRightDataLoader.SpecRight.Stage."+sStage);
			tPolicy = EnoviaResourceBundle.getProperty(context, "TRUSpecRightDataLoader",context.getLocale(), "TRUSpecRightDataLoader.TRU.Policy."+sStage);
			specRightTemplate =hmJsonFieldMap.get("SR_Specright_Template__c").replaceAll(" ", "");
			System.out.println("....specRightTemplate....."+specRightTemplate);
			specRightTemplateId=getBusObjectId(context, jnjBomConstants_mxJPO.TYPE_TEMPLATE,EnoviaResourceBundle.getProperty(context, "TRUSpecRightDataLoader",context.getLocale(), "TRUSpecRightDataLoader.SpecRight.Template."+specRightTemplate), DomainConstants.QUERY_WILDCARD,"current == Effective && revision == last");

			sDesignResp = getBusObjectId(context, jnjBomConstants_mxJPO.TYPE_COMPANY,EnoviaResourceBundle.getProperty(context, "TRUSpecRightDataLoader",context.getLocale(), "TRUSpecRightDataLoader.TRU.DesignResponsibility"),"-",DomainConstants.EMPTY_STRING);
			emxCPNProductDataPartStage_mxJPO cpnJPO = new emxCPNProductDataPartStage_mxJPO(context, new String[1]);
			sExpiration = cpnJPO.getStatusExpirationDate(context, tStage);
			specRightOwnerId = hmJsonFieldMap.get("OwnerId");
			System.out.println("....specRightOwnerId....."+specRightOwnerId);
			String truOwnerName = validateOwner(context,specRightOwnerId);
			System.out.println("....truOwnerName....."+truOwnerName);
			System.out.println("....sDesignResp....."+sDesignResp);
			System.out.println("....specRightTemplateId....."+specRightTemplateId);
			
			hmAttrMap.put(jnjBomConstants_mxJPO.ATTRIBUTE_TITLE, "Test");
			hmAttrMap.put(jnjBomConstants_mxJPO.ATTRIBUTE_TRU_SEGMENT, "Consumer");

			hmCreateParam.put("type", "_selectedType:" + objType + ",type_ProductDataPart");
			hmCreateParam.put("Policy", tPolicy);
			hmCreateParam.put("Template", specRightTemplateId);


			requestMap.put("TypeActual", objType);
			requestMap.put("Policy", tPolicy);
			requestMap.put("Stage", "Development");
			requestMap.put("ObjectOwner", truOwnerName);
			requestMap.put("Template", specRightTemplateId);
			requestMap.put("DesignResponsibilityOID", "");
			requestMap.put("DesignResponsibility", sDesignResp);
			requestMap.put("OwningRegionOID", "");
			requestMap.put("Member ListOID", "");
			requestMap.put("Render Language", hmJsonFieldMap.get("SR_Language__c"));
			requestMap.put("ExpirationDate", sExpiration);
			requestMap.put("ChangeTemplateOID", "");
			requestMap.put("COOID", "");
			requestMap.put("Description", EnoviaResourceBundle.getProperty(context, "JNJTRUConcertoDataLoader",context.getLocale(), "JNJTRUConcertoDataLoader.Spec.Description"));
			hmPostProcessParam.put("requestMap", requestMap);

			//Creating the Spec
			emxCPNProductData_mxJPO oNewSpec = new emxCPNProductData_mxJPO(context, new String[1]);
			HashMap hmNewObj = oNewSpec.createProductDataUsingForm(context, JPO.packArgs(hmCreateParam));
			strSpecId = (String) hmNewObj.get(DomainConstants.SELECT_ID);
			System.out.println("....strSpecId....."+strSpecId);
			DomainObject doSpecObject = new DomainObject(strSpecId);
			doSpecObject.setOwner(context, truOwnerName);
			doSpecObject.setAttributeValues(context, hmAttrMap);
			doSpecObject.setAttributeValues(context, hmAttrMap);
			doSpecObject.setDescription(context, "test");
			paramMap.put("newObjectId", strSpecId);

			hmPostProcessParam.put("paramMap", paramMap);
			//ContextUtil.pushContext(context, PropertyUtil.getSchemaProperty(context, "person_UserAgent"),DomainConstants.EMPTY_STRING,DomainConstants.EMPTY_STRING);
			System.out.println("....context....."+context);
			oNewSpec.createProductDataPostProcess(context, JPO.packArgs(hmPostProcessParam));
		}catch(Exception ex) {
			ex.printStackTrace();
		}

		return null;
	}
	public String validateOwner(Context context, String specRightOwnerId) {
		String ownerName=null;
		try {
			String ownerEmail = getOwnerDetails(context,specRightOwnerId);
			System.out.println(jnjBomConstants_mxJPO.TYPE_PERSON);
			String ownerId = getBusObjectId(context, jnjBomConstants_mxJPO.TYPE_PERSON, DomainConstants.QUERY_WILDCARD, DomainConstants.QUERY_WILDCARD,"attribute["+jnjBomConstants_mxJPO.ATTRIBUTE_EMAIL_ADDRESS+"].value=="+ownerEmail+" && current==Active");
			System.out.println("........ownerId..."+ownerId);
			if(!"".equals(ownerId)&&ownerId!=null) {
				DomainObject sOwner = new DomainObject(ownerId);
				ownerName= sOwner.getInfo(context, DomainConstants.SELECT_NAME);
			}
		}catch(Exception ex) {
			ex.printStackTrace();
		}
		return ownerName;
	}
	public String getOwnerDetails(Context context, String specRightOwnerId) {
		String ownerEmail=null;
		URL url;
		String inputLine = null;
		String fieldKey = "fields";
		String fieldList = "Email";
		System.out.println(fieldList);
		HashMap<String, String> hmOwnerMap = new HashMap<String, String>();
		int responseCode = 0;
		int retryCount = 0;
		while (responseCode != 200 && retryCount < 3) {
			try {
				URIBuilder uri = new URIBuilder("https://test.specright.com/v1/objects/User/"+specRightOwnerId).addParameter(fieldKey, fieldList);
				System.out.println(uri.toString());
				url = uri.build().toURL();
				HttpsURLConnection con = (HttpsURLConnection) url.openConnection();
				con.setRequestMethod("GET");
				//String accessToken = generateToken(context, ACCESS_TOKEN);
				String auth = "Bearer " + ACCESS_TOKEN;
				//con.setDoOutput(true);
				con.setRequestProperty("Content-Type", "application/x-www-form-urlencoded");
				con.setRequestProperty("x-user-id", "api@specright.com.kenvuedev");
				con.setRequestProperty("x-api-key", "he6rFkRDeEvrwAg9Dl70d3Fox0aNfmB82EwHQdzI");
				con.setRequestProperty("Authorization", auth);

				responseCode = con.getResponseCode();
				if(responseCode==200) {
					BufferedReader in = new BufferedReader(
							new InputStreamReader(con.getInputStream()));
					StringBuffer response = new StringBuffer();
					while ((inputLine = in.readLine()) != null) {
						response.append(inputLine);
					}
					in.close();
					System.out.println(response.toString());
					JSONObject jsonObj = new JSONObject(response.toString());
					JSONObject ja_data = jsonObj.getJSONObject("data");
					JSONArray fieldArray = ja_data.getJSONArray("fields");
					for(int j=0; j<fieldArray.length(); j++) 
					{
						JSONObject fieldObj = fieldArray.getJSONObject(j);
						String field = fieldObj.getString("field");
						String fieldValue = fieldObj.getString("value");
						hmOwnerMap.put(fieldKey, fieldValue);
					}
					ownerEmail = hmOwnerMap.get("Email");
				} else {

				}
			}catch (Exception e) {
				e.printStackTrace();
			}
			retryCount++;
		}
		return specRightOwnerId;

	}
	public String  getBusObjectId(Context context,String sType, String sName, String sRev,String sWhereClause)
	{
		sVault=PropertyUtil.getSchemaProperty(context, "vault_eServiceProduction");
		if (sWhereClause.equals("") || sWhereClause.trim().length() == 0)
		{
			sWhereClause = null;
		}

		String sBusType                     = "";
		String sBusName                     = "";
		String sBusRev                      = "";
		String sBusId                       = "";

		MapList busObjList                  = null;
		System.out.println("........Inside getBusObjectId...sType:.."+sType);
		System.out.println("........Inside getBusObjectId...sName:.."+sName);
		System.out.println("........Inside getBusObjectId...sRev:.."+sRev);

		try
		{
			StringList busSelects = new StringList();
			busSelects.add(DomainObject.SELECT_ID);

			busObjList  =   DomainObject.findObjects(context, sType, sName, sRev, null, sVault, sWhereClause, true, busSelects);
			int iSize = busObjList.size();
			//for(int iLoop = 0; iLoop < iSize; iLoop++) {
			if (iSize > 0) {
				Map busMap          = (Map)busObjList.get(iSize - 1);
				sBusId              = (String)busMap.get(DomainObject.SELECT_ID);
			}
		}
		catch (Exception e)
		{
			e.printStackTrace();
			sBusId  = "";
		}

		return sBusId;
	}
	public String patchSpecData(Context context, String[] args) throws IOException {
		URL url;
		OutputStream stream;
		String inputLine = null;
		//String specRightId="a1mWF000000tJd7YAE";
		//String specRightId="a1mWF000001elsTYAQ";
		int responseCode = 0;
		int retryCount = 0;

		String jsonString = args[0];
		String specRightId = args[1];
		String accessToken = args[2];
		/*JSONObject jsonobject = new JSONObject(jsonString);
		String state = jsonobject.optString("SR_State__c");
		String effectiveDate = jsonobject.optString("SR_TRU_Record_Effective_Date__c");
		String access1 = jsonobject.optString("accessToken");


		JSONObject jsonContent = new JSONObject();
		jsonContent.put("specright__Status__c", "");
		jsonContent.put("SR_Region_s__c", "EMEA");
		jsonContent.put("SR_Language__c", "English");
		jsonContent.put("SR_State__c", state);

		if("Effective".equalsIgnoreCase(state)){
			jsonContent.put("SR_TRU_Record_Effective_Date__c", effectiveDate);
		}

		JSONObject json = new JSONObject();
		json.put("content", jsonContent);*/

		JSONObject content = new JSONObject(jsonString);
		JSONObject json = new JSONObject();
		json.put("content", content);
		System.out.println(json.toString()); 
		byte[] out = json.toString().trim().getBytes(StandardCharsets.UTF_8);
		try {
			//String accessToken = generateToken(context, args);
			while (responseCode != 200 && retryCount <= 3) {
				URIBuilder uri = new URIBuilder("https://test.specright.com/v1/objects/specright__Specification__c/" + specRightId);
				System.out.println(uri.toString());
				url = uri.build().toURL();
				HttpsURLConnection con = (HttpsURLConnection) url.openConnection();
				con.setRequestProperty("X-HTTP-Method-Override", "PATCH");
				con.setRequestMethod("POST");
				String auth = "Bearer " + accessToken;
				con.setDoOutput(true);
				con.setRequestProperty("Content-Type", "application/json");
				con.setRequestProperty("x-user-id", "api@specright.com.kenvuedev");
				con.setRequestProperty("x-api-key", "he6rFkRDeEvrwAg9Dl70d3Fox0aNfmB82EwHQdzI");
				con.setRequestProperty("Authorization", auth);
				con.setConnectTimeout(60000);
				stream = con.getOutputStream();
				stream.write(out);
				// Flush the stream to ensure all data is sent
				stream.flush();

				responseCode = con.getResponseCode();
				System.out.println(responseCode);
				if(responseCode==200) {
					BufferedReader in = new BufferedReader(
							new InputStreamReader(con.getInputStream()));
					StringBuffer response = new StringBuffer();
					while ((inputLine = in.readLine()) != null) {
						response.append(inputLine);
					}
					in.close();
					System.out.println(response.toString());
				} else {

				}
				retryCount++;
			}
		}catch (Exception e) {
			e.printStackTrace();
		}

		return inputLine;

	}
	public String getSupplierData(Context context, String[] args) throws Exception {
		URL url;
		String inputLine = null;
		String fieldKey = "fields";
		String fieldList = "Id,Name,specright__Status__c";
		System.out.println(fieldList);
		String filterKey = "filter";
		String filterList = "{\"SR_State__c\":\"Unpublished\"},{\"IsDeleted\":\"false\"}}";
		//URL obj = new URL("{{host}}/objects/specright__Specification__c?");
		int responseCode = 0;
		int retryCount = 0;
		while (responseCode != 200 && retryCount <= 3) {
			try {
				URIBuilder uri = new URIBuilder("https://test.specright.com/v1/suppliers?").addParameter(fieldKey, "Id,Name");
				System.out.println(uri.toString());
				url = uri.build().toURL();
				HttpsURLConnection con = (HttpsURLConnection) url.openConnection();
				con.setRequestMethod("GET");
				String accessToken = generateToken(context, args);
				String auth = "Bearer " + accessToken;
				//con.setDoOutput(true);
				con.setRequestProperty("Content-Type", "application/x-www-form-urlencoded");
				con.setRequestProperty("x-user-id", "api@specright.com.kenvuedev");
				con.setRequestProperty("x-api-key", "he6rFkRDeEvrwAg9Dl70d3Fox0aNfmB82EwHQdzI");
				con.setRequestProperty("Authorization", auth);

				responseCode = con.getResponseCode();
				if(responseCode==200) {
					BufferedReader in = new BufferedReader(
							new InputStreamReader(con.getInputStream()));
					StringBuffer response = new StringBuffer();
					while ((inputLine = in.readLine()) != null) {
						response.append(inputLine);
					}
					in.close();
					System.out.println(response.toString());
				} else {

				}
			}catch (Exception e) {
				e.printStackTrace();
			}
			retryCount++;
		}
		return inputLine;
	}

	/* 	public String updateTruSpec(Context context, String[] args) throws IOException {
		try {
			// Unpack the arguments
			HashMap programMap = JPO.unpackArgs(args);
			HashMap requestMap = (HashMap)programMap.get("requestMap");
			HashMap paramMap = (HashMap)programMap.get("paramMap");

			// Extract values from maps
			String INPUT_JSON = (String)paramMap.get("INPUT_JSON");
			String strTransactionId = (String)paramMap.get("strTransactionId");
			String strTRUId = (String)requestMap.get("strTRUId");

			// Print the extracted values
			System.out.println("--- Extracted Values ---");
			System.out.println("strTransactionId: " + strTransactionId);
			System.out.println("strTRUId: " + strTRUId);
			System.out.println("INPUT_JSON: " + INPUT_JSON);

			// Parse and iterate through INPUT_JSON if it exists
			if (INPUT_JSON != null && !INPUT_JSON.isEmpty()) {
				try {
					System.out.println("\n--- Parsing INPUT_JSON ---");
					JSONObject jsonObject = new JSONObject(INPUT_JSON);

					// Print all key-value pairs in the JSON
					Iterator<String> keys = jsonObject.keys();
					while (keys.hasNext()) {
						String key = keys.next();
						Object value = jsonObject.get(key);
						System.out.println(key + ": " + value);
					}
				} catch (Exception jsonEx) {
					System.out.println("Error parsing INPUT_JSON: " + jsonEx.getMessage());
					jsonEx.printStackTrace();
				}
			} else {
				System.out.println("INPUT_JSON is null or empty");
			}

			// TODO: Add your business logic here to update TRU Spec

			return "Success"; // Return appropriate response

		} catch (Exception e) {
			System.out.println("Error in updateTruSpec: " + e.getMessage());
			e.printStackTrace();
			return "Error: " + e.getMessage();
		}
	} */



	public String updateTruSpec(Context context, String[] args) throws Exception {
		try {
			// Validate input arguments


			// Unpack the arguments properly
			HashMap programMap = JPO.unpackArgs(args);
			if (programMap == null) {
				throw new IllegalArgumentException("Failed to unpack arguments");
			}


			// Extract values with null checks
			Map INPUT_JSON = (Map)programMap.get("INPUT_JSON");
			String strTransactionId = (String)programMap.get("strTransactionId");
			String strTRUId = (String)programMap.get("strTRUId");


			// Log extracted values
			System.out.println("--- Extracted Values ---");
			System.out.println("Transaction ID: " + strTransactionId);
			System.out.println("TRU ID: " + strTRUId);
			System.out.println("Input JSON: " + INPUT_JSON);

			// Process the INPUT_JSON if present
			if (INPUT_JSON != null && !INPUT_JSON.isEmpty()) {
				try {
					System.out.println("\n--- Parsing INPUT_JSON ---");
					JSONObject jsonObject = new JSONObject(INPUT_JSON);

					// Print all key-value pairs in the JSON
					Iterator<String> keys = jsonObject.keys();
					while (keys.hasNext()) {
						String key = keys.next();
						Object value = jsonObject.get(key);
						System.out.println(key + ": " + value);
					}
				} catch (Exception e) {
					System.out.println("Error processing INPUT_JSON: " + e.getMessage());
				}
			}
			HashMap<String, String> hmJsonFieldMap = new HashMap<String, String>();
			HashMap<String,String> truAttributeMap = new HashMap<String, String>();
			JSONObject jsonObj = new JSONObject(INPUT_JSON);
			JSONArray fieldArray = jsonObj.getJSONArray("fields");
			int fieldArray_length = fieldArray.length();
			for(int i=0; i<fieldArray_length; i++) 
			{
				JSONObject fieldObj = fieldArray.getJSONObject(i);
				String field = fieldObj.getString("field");
				String fieldValue = fieldObj.getString("value");
				String truAttr = EnoviaResourceBundle.getProperty(context, "TRUSpecRightDataLoader",context.getLocale(), "TRUSpecRightDataLoader.SpecRight.ActualAttribute."+field);

				DomainObject doBusObject = new DomainObject(strTRUId);
				doBusObject.setAttributeValues(context, truAttributeMap);
				hmJsonFieldMap.put(truAttr, fieldValue);
			}


			return "Success"; // Or return appropriate response

		} catch (Exception e) {
			System.out.println("Error in updateTruSpec: " + e.getMessage());
			e.printStackTrace();
			throw e; // Re-throw to see the error in the client
		}
	}


	/**
	 * This method is called during promotion of the transaction object. It will set the event as effective/obsolete/reject/delete
	 *
	 * @param context  - Enovia context
	 * @param strObjId - Object Id for which status to be sent back
	 *
	 * @return void
	 * @throws none
	 * @author TCS()
	 *
	 */
	public void promoteTransactionObject(Context context, String[] args) throws Exception{
		System.out.println("**********inside promoteTransactionObject**********");
		try {
			String strObjectId = args[0];
			System.out.println("Spec bus Id: "+strObjectId);
			
			String strEvent = args[1];
			System.out.println("Spec bus strEvent: "+strEvent);
			
			if(isSpecRightSpec(context,strObjectId)){
				System.out.println("**********inside if loop**********");
				String sTxnId=null;

				sTxnId = FrameworkUtil.autoName(context,"type_Transaction","", "policy_Transaction", "vault_eServiceProduction"); 
				System.out.println("\n*** inside promoteTransactionObject- sTxnId : "+sTxnId);
				DomainObject txnObject = DomainObject.newInstance(context, sTxnId);

				DomainObject dObject = new DomainObject(strObjectId);
				StringList selectList = new StringList(1);
				selectList.add(DomainConstants.SELECT_CURRENT);
				selectList.add(DomainConstants.SELECT_NAME);

				Map hashObjmap = dObject.getInfo(context, selectList);
				String sState = (String) hashObjmap.get(DomainConstants.SELECT_CURRENT);
				String sName = (String) hashObjmap.get(DomainConstants.SELECT_NAME);

				System.out.println("***Object info from TRU:" +sState +sName );


				if ("Effective".equalsIgnoreCase(sState)) {	
					//set event
					txnObject.setAttributeValue(context, ATTRIBUTE_TRANSACTION_EVENT, sState);
					txnObject.setAttributeValue(context, ATTRIBUTE_DC_SPEC_ID, strObjectId);
					txnObject.setAttributeValue(context, ATTRIBUTE_DC_SPEC_NUMBER, sName);
					txnObject.setDescription(context,"SpecRight");
					//promote transaction
					txnObject.promote(context);
				}else if("Obsolete".equals(sState)) {
					//set event
					txnObject.setAttributeValue(context, ATTRIBUTE_TRANSACTION_EVENT, sState);
					txnObject.setAttributeValue(context, ATTRIBUTE_DC_SPEC_ID, strObjectId);
					txnObject.setAttributeValue(context, ATTRIBUTE_DC_SPEC_NUMBER, sName);
					txnObject.setDescription(context,"SpecRight");					
					//promote transaction
					txnObject.promote(context);			
				} else if("Rejection".equals(sState)) {

				} else if("Delete".equals(strEvent)) {
					//set event
					txnObject.setAttributeValue(context, ATTRIBUTE_TRANSACTION_EVENT, strEvent);
					/* txnObject.setAttributeValue(context, ATTRIBUTE_DC_SPEC_ID, strObjectId);
					txnObject.setAttributeValue(context, ATTRIBUTE_DC_SPEC_NUMBER, sName); */
					txnObject.setDescription(context,"SpecRight");					
					//promote transaction
					txnObject.promote(context);
				}
			}
		}catch(Exception ex) {
			ex.printStackTrace();
		}

	}


	/**
	 * This method updates the state details in SpecRight when spec is promoted to Effective in TRU
	 *
	 * @param context  - Enovia context
	 * @param strObjId - Object Id for which status to be sent back
	 *
	 * @return void
	 * @throws none
	 * @author TCS()
	 *
	 */
	public void updateStateToEffectiveInSpecRight(Context context, String[] args) throws Exception{
		System.out.println("\n*** inside updateStateToEffectiveInSpecRight***");
		//generatetoken
		String accessToken = generateToken(context, args);
		System.out.println("accessToken: "+accessToken);
		try{
			String strTxnObjId = args[0]; // txn id
			System.out.println("Spec txn Id: "+strTxnObjId);
			DomainObject txnObj = new DomainObject(strTxnObjId);
			String sTRUObjId = txnObj.getAttributeValue(context,ATTRIBUTE_DC_SPEC_ID);

			System.out.println("Spec bus Id: "+sTRUObjId);

			DomainObject doObj = new DomainObject(sTRUObjId);
			StringList selectList = new StringList(5);
			selectList.add(DomainConstants.SELECT_TYPE);
			selectList.add(DomainConstants.SELECT_NAME);
			selectList.add(DomainConstants.SELECT_REVISION);
			selectList.add(DomainConstants.SELECT_CURRENT);
			selectList.add("attribute[Effective Date]");

			Map hashObjmap = doObj.getInfo(context, selectList);
			String strType = (String) hashObjmap.get(DomainConstants.SELECT_TYPE);
			String strName = (String) hashObjmap.get(DomainConstants.SELECT_NAME);
			String strRevision = (String) hashObjmap.get(DomainConstants.SELECT_REVISION);
			String strState = (String) hashObjmap.get(DomainConstants.SELECT_CURRENT);
			String strEffectiveDate = (String) hashObjmap.get("attribute[Effective Date]");

			System.out.println("***Object info from TRU in updateStateToEffectiveInSpecRight:" +strType + " " +strName + " " +strRevision + " " +strState +" "+strEffectiveDate);

			String input = strEffectiveDate;
			DateTimeFormatter inputFormatter = DateTimeFormatter.ofPattern("M/d/yyyy h:mm:ss a");
			LocalDateTime localDateTime = LocalDateTime.parse(input, inputFormatter);
			ZonedDateTime zonedDateTime = localDateTime.atZone(ZoneId.of("UTC"));
			DateTimeFormatter outputFormatter = DateTimeFormatter.ofPattern("yyyy-MM-dd'T'HH:mm:ss.SSSZ");

			String formatted = zonedDateTime.format(outputFormatter);
			System.out.println(formatted); 

			//check if current is effective in TRU
			if("Effective".equalsIgnoreCase(strState))	{	
				System.out.println("***state is effective. patch update in specright***");

				JSONObject jsonContent = new JSONObject();
				jsonContent.put("SR_State__c", "Effective");
				jsonContent.put("SR_TRU_Record_Effective_Date__c",formatted); //Effective date
				//jsonContent.put("accessToken",accessToken); 


				String jsonString = jsonContent.toString();
				String specRightId="a1mWF000001elsTYAQ"; 

				String[] patchArgs = new String[]{jsonString,specRightId,accessToken};

				patchSpecData(context,patchArgs); 

			} else{
				System.out.println("***State not effective in TRU***");
			} 
		}catch(Exception e){
			e.printStackTrace();
		}
	}

	/**
	 * This method updates the state details in SpecRight when spec is promoted to Obsolete in TRU
	 *
	 * @param context  - Enovia context
	 * @param strObjId - Object Id for which status to be sent back
	 *
	 * @return void
	 * @throws none
	 * @author TCS()
	 *
	 */
	public void updateStateToObsoleteInSpecRight(Context context, String[] args) throws Exception{
		System.out.println("\n*** inside updateStateToObsoleteInSpecRight***");
		//generatetoken
		String accessToken = generateToken(context, args);
		System.out.println("accessToken: "+accessToken);
		try{
			String strTxnObjId = args[0]; // txn id
			System.out.println("Spec txn Id: "+strTxnObjId);
			DomainObject txnObj = new DomainObject(strTxnObjId);
			String sTRUObjId = txnObj.getAttributeValue(context,ATTRIBUTE_DC_SPEC_ID);

			System.out.println("Spec bus Id: "+sTRUObjId);

			DomainObject doObj = new DomainObject(sTRUObjId);
			StringList selectList = new StringList(4);
			selectList.add(DomainConstants.SELECT_TYPE);
			selectList.add(DomainConstants.SELECT_NAME);
			selectList.add(DomainConstants.SELECT_REVISION);
			selectList.add(DomainConstants.SELECT_CURRENT);

			Map hashObjmap = doObj.getInfo(context, selectList);
			String strType = (String) hashObjmap.get(DomainConstants.SELECT_TYPE);
			String strName = (String) hashObjmap.get(DomainConstants.SELECT_NAME);
			String strRevision = (String) hashObjmap.get(DomainConstants.SELECT_REVISION);
			String strState = (String) hashObjmap.get(DomainConstants.SELECT_CURRENT);

			System.out.println("***Object info from TRU:" +strType + " " +strName + " " +strRevision + " " +strState);


			//check if current is obsolete in TRU
			if("Obsolete".equalsIgnoreCase(strState))	{	
				System.out.println("***state is obsolete. patch update in specright***");

				JSONObject jsonContent = new JSONObject();
				jsonContent.put("SR_State__c", "Obsolete");
				//jsonContent.put("accessToken",accessToken); 


				String jsonString = jsonContent.toString();
				String specRightId="a1mWF000001elsTYAQ"; 
				//String[] patchArgs = new String[]{jsonString};
				String[] patchArgs = new String[]{jsonString,specRightId,accessToken};

				patchSpecData(context,patchArgs); 
			} else{
				System.out.println("***State not obsolete in TRU***");
			}
		}catch(Exception e){
			e.printStackTrace();
		}
	}



	public String refreshToken(Context context, String sTxnId) throws Exception {
		URL url;
		OutputStream stream;
		OutputStreamWriter oStreamWrt;
		String refreshToken = DomainConstants.EMPTY_STRING;
		String strAcessToken = DomainConstants.EMPTY_STRING;
		if(UIUtil.isNotNullAndNotEmpty(sTxnId)) {
			DomainObject doObj = new DomainObject(sTxnId);
			String strToken = doObj.getAttributeValue(context, "ATTRIBUTE_SPECRIGHT_API_TOKEN");
			if(UIUtil.isNotNullAndNotEmpty(strToken)) {
				System.out.println("---sAttributeAPIToken **" + strToken);

				System.out.println("---AttributeValue **" + strToken);

				JSONObject json = new JSONObject();
				json.put("grant_type", "refresh_token");
				json.put("refresh_token", strToken);
				byte[] out = json.toString().trim().getBytes(StandardCharsets.UTF_8);
				String tokenUrl = "https://test.specright.com/token";
				int responseCode = 0;
				int retryCount = 0;

				while (responseCode != 200 && retryCount <= 3) {
					try {
						url = new URL(tokenUrl);
						HttpsURLConnection https = (HttpsURLConnection)url.openConnection();
						https.setRequestMethod("POST");
						https.setDoOutput(true);
						https.setRequestProperty("Content-Type", "application/json");
						https.setConnectTimeout(60000);

						stream = https.getOutputStream();
						stream.write(out);
						// Flush the stream to ensure all data is sent
						stream.flush();

						responseCode = https.getResponseCode();
						StringBuilder response = new StringBuilder();
						if(responseCode==200) {
							BufferedReader in = new BufferedReader(
									new InputStreamReader(https.getInputStream()));
							String inputLine;
							while ((inputLine = in.readLine()) != null) {
								response.append(inputLine);
							}
							in.close();
							//System.out.println(response.toString());
							JSONObject jo = new JSONObject(response.toString());
							strAcessToken = jo.getString("access_token");
							System.out.println("...............accessToken..."+strAcessToken);
							refreshToken = jo.getString("refresh_token");
							System.out.println("...............refreshToken..."+refreshToken);
						} else {

						}
					}catch (Exception e) {
						e.printStackTrace();
					}
					retryCount++;
				}

			}

		}

		return strAcessToken;

	}

	/**
	 * If specright spec is rejected by approver in TRU , 
	 * this method will demote the state back to draft in TRU and specright
	 *
	 * @param context  - Enovia context
	 * @param strObjId - Object Id for which status to be sent back
	 *
	 * @return void
	 * @throws none
	 * @author TCS()
	 *
	 */
	public void demoteSpecStateOnReject(Context context, String[] args) throws Exception{
		System.out.println("\n*** inside demoteSpecStateOnReject***");
		//generatetoken
		String accessToken = generateToken(context, args);
		System.out.println("accessToken: "+accessToken);
		try{
			/* String strTxnId = args[0];
			//String strTxnId = "59712.34061.48640.52216";
			System.out.println("Spec bus Id: "+strTxnId); 


			DomainObject doObj = new DomainObject(strTxnId); */
			String strTxnObjId = args[0]; // txn id
			System.out.println("Spec txn Id: "+strTxnObjId);
			DomainObject txnObj = new DomainObject(strTxnObjId);
			String sTRUObjId = txnObj.getAttributeValue(context,ATTRIBUTE_DC_SPEC_ID);

			System.out.println("Spec bus Id: "+sTRUObjId);

			DomainObject doObj = new DomainObject(sTRUObjId);
			StringList selectList = new StringList(3);
			selectList.add(DomainConstants.SELECT_TYPE);
			selectList.add(DomainConstants.SELECT_NAME);
			selectList.add(DomainConstants.SELECT_REVISION);
			selectList.add(DomainConstants.SELECT_CURRENT);

			Map hashObjmap = doObj.getInfo(context, selectList);
			String strType = (String) hashObjmap.get(DomainConstants.SELECT_TYPE);
			String strName = (String) hashObjmap.get(DomainConstants.SELECT_NAME);
			String strRevision = (String) hashObjmap.get(DomainConstants.SELECT_REVISION);
			String strState = (String) hashObjmap.get(DomainConstants.SELECT_CURRENT);

			System.out.println("***Object info from TRU:" +strType + " " +strName + " " +strRevision + " " +strState);

			String strRouteStatus="";

			StringList slSelRel = new StringList();
			slSelRel.add("attribute[Route Status]");

			StringList slSelBus = new StringList();
			slSelBus.add(DomainConstants.SELECT_NAME); 
			slSelBus.add(DomainConstants.SELECT_ID); 

			MapList mlConnectedObjectList = doObj.getRelatedObjects(context,
					"Object Route", "Route", slSelBus,
					slSelRel, false, true, (short) 1, null, null);

			System.out.println("......mlConnectedObjectList......."+mlConnectedObjectList);
			int iMapListSize1 = mlConnectedObjectList.size();

			for (int iLoop1 = 0; iLoop1 < iMapListSize1; iLoop1++) {
				Map mEachObjectMap = (Map) mlConnectedObjectList.get(iLoop1);
				String strRouteId = (String) mEachObjectMap.get(DomainConstants.SELECT_ID);

				DomainObject routeObj = new DomainObject(strRouteId);

				strRouteStatus = routeObj.getInfo(context,"attribute[Route Status]");

				System.out.println("......strRouteStatus......."+strRouteStatus);
			}	

			//check if spec is rejected by approver in TRU
			if("Stopped".equalsIgnoreCase(strRouteStatus)){
				System.out.println("***route is rejected. patch update in specright***");

				JSONObject jsonContent = new JSONObject();
				jsonContent.put("SR_State__c", "Draft");
				jsonContent.put("accessToken",accessToken); 


				String jsonString = jsonContent.toString();
				String[] patchArgs = new String[]{jsonString};

				patchSpecData(context,patchArgs); 
			} else{
				System.out.println("***spec not rejected in TRU***");
			}
		}catch(Exception e) {
			e.printStackTrace();
		}
	}


	
	/**
	 * This method returns the status back to specright when a PC is deleted
	 *
	 * @param context  - Enovia context
	 *
	 * @return void
	 * @throws none
	 * @author TCS
	 *
	 */
	public void sendStatusBackToSpecrightOnDelete(Context context, String[] args) throws Exception{
		System.out.println("***sendStatusBackToSpecrightOnDelete****");
		//generatetoken
		String accessToken = generateToken(context, args);
		System.out.println("accessToken: "+accessToken);
		try {
			String strTxnObjId = args[0]; // txn id
			
			System.out.println("sendStatusBackToSpecrightOnDelete sTxnID Id: "+strTxnObjId);
			
			DomainObject txnObj = new DomainObject(strTxnObjId);
			String sTRUObjId = txnObj.getAttributeValue(context,ATTRIBUTE_DC_SPEC_ID);

			System.out.println("Spec bus Id: "+sTRUObjId);
			

			/*URL url;
			OutputStream stream;
			String inputLine = null;

			int responseCode = 0;
			int retryCount = 0;

			String jsonString = args[0];
			String specRightId = "";
			
			
			JSONObject content = new JSONObject(jsonString);
			JSONObject json = new JSONObject();
			json.put("content", content);
			System.out.println(json.toString()); 
			byte[] out = json.toString().trim().getBytes(StandardCharsets.UTF_8);
			try {
				//String accessToken = generateToken(context, args);
				while (responseCode != 200 && retryCount <= 3) {
					URIBuilder uri = new URIBuilder("https://test.specright.com/v1/objects/specright__Specification__c/" + specRightId);
					System.out.println(uri.toString());
					url = uri.build().toURL();
					HttpsURLConnection con = (HttpsURLConnection) url.openConnection();
					//con.setRequestProperty("X-HTTP-Method-Override", "PATCH");
					con.setRequestMethod("DELETE");
					String auth = "Bearer " + accessToken;
					con.setDoOutput(true);
					con.setRequestProperty("Content-Type", "application/json");
					con.setRequestProperty("x-user-id", "api@specright.com.kenvuedev");
					con.setRequestProperty("x-api-key", "he6rFkRDeEvrwAg9Dl70d3Fox0aNfmB82EwHQdzI");
					con.setRequestProperty("Authorization", auth);
					con.setConnectTimeout(60000);
					stream = con.getOutputStream();
					stream.write(out);
					// Flush the stream to ensure all data is sent
					stream.flush();

					responseCode = con.getResponseCode();
					System.out.println(responseCode);
					if(responseCode==200) {
						BufferedReader in = new BufferedReader(
								new InputStreamReader(con.getInputStream()));
						StringBuffer response = new StringBuffer();
						while ((inputLine = in.readLine()) != null) {
							response.append(inputLine);
						}
						in.close();
						System.out.println(response.toString());
					} else {

					}
					retryCount++;
				}
			} catch(Exception e) {
				e.printStackTrace();
			}*/
		
		} catch(Exception e) {
			e.printStackTrace();
		}
	}
}
